#!/bin/python

from datetime import datetime, timedelta
from bcc import BPF

REQ_WRITE = 1       # from include/linux/blk_types.h

bpf_text='''
#include <uapi/linux/ptrace.h>
#include <linux/blkdev.h>
#include <linux/blk-mq.h>

BPF_HASH(start, struct request *);

void trace_start(struct pt_regs *ctx, struct request *req) {
    // stash start timestamp by request ptr
    u64 ts = bpf_ktime_get_ns();
    start.update(&req, &ts);
}

void trace_stop(struct pt_regs *ctx, struct request *req) {
    u64 *tsp, delta;

    tsp = start.lookup(&req);
    if (tsp != 0) {
        delta = bpf_ktime_get_ns() - *tsp;
        bpf_trace_printk("%d %x %d\\n", req->__data_len, 
            req->cmd_flags, delta / 1000);
        start.delete(&req);
    }
}
'''

print("\nTracing ... Ctrl-C to end.")

# load BPF program
b = BPF(text=bpf_text)
#b.attach_kprobe(event="blk_start_request", fn_name="trace_start")
b.attach_kprobe(event="blk_mq_start_request", fn_name="trace_start")
#b.attach_kprobe(event="blk_account_io_done", fn_name="trace_stop")
b.attach_kprobe(event="blk_mq_end_request", fn_name="trace_stop")
b.attach_kprobe(event="blk_mq_end_request_batch", fn_name="trace_stop")
b.attach_kprobe(event="blk_mq_complete_request", fn_name="trace_stop")

start_time = datetime.now()
while 1:
    (task, pid, cpu, flags, ts, msg) = b.trace_fields()
    (req_size, req_flags, req_time_us) = msg.decode('ASCII').split()
    td_ts = timedelta(microseconds=ts)
    log_time = start_time + td_ts
    print(f"{log_time}: Duration {req_time_us} Âµs")
